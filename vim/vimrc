set nocompatible
set backspace=indent,eol,start
set number
set ruler
"set ignorecase
"set smartcase
set incsearch
set matchtime=5
set history=500
set wildmenu
set nofoldenable
set mouse=a
filetype on         "侦测文件类型
syntax enable       "语法高亮
let mapleader=","
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l
nmap <M-j> mz:m+<CR>`z
nmap <M-k> mz:m-2<CR>`z
nmap <Tab>  :tabnext<CR>
nmap <S-Tab>  :tabprevious<CR>
vmap <M-j> :m'>+<CR>`<my`>mzgv`yo`z
vmap <M-k> :m'<-2<CR>`>my`<mzgv`yo`z
"1 tab == 4 spaces
"set tabstop=8      " how much <Space> to SHOW as <Tab>
set softtabstop=4
set expandtab
set shiftwidth=4
set smarttab
set fileencodings=ucs-bom,utf-8,gb18030,gb2312,bgk,default,latin1
set fileencoding=utf-8
"set encoding=utf-8
"set completeopt=longest,menuone,preview
set completeopt=longest,menu
"set novisualbell
"if $TERM == "xterm" || $TERM == "rxvt" || $TERM == "xterm-256color" ||
"            \ $TERM == "rxvt-unicode" || $TERM == "dumb" ||
"            \ $TERM == "vte-256color" || $TERM == "screen-256color"
"    set t_Co=256
"    colorscheme desert
"endif
set t_Co=256
colorscheme desert


"set shortmess=atI
"set lines=28  columns=200
set foldmethod=indent
"set foldmethod=syntax|manual
set foldenable
nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>
set foldlevel=9
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc,.png,.jpg

set cinoptions=:0                 "case与switch对齐 TODO 但是注释没对齐
set cindent
set smartindent
set autoindent
"set list listchars=tab:>-
set expandtab

" normal file
func! s:SetNormalOptions()
    "set spell
    set omnifunc=
    "set textwidth=0
endfunc

func! s:SetLuaOptions()
    setlocal makeprg=lua\ %
endfunc

func! s:SetLispOptions()
    set nocindent
    set autoindent
    set lisp
    " scheme is a link to chez-scheme
    setlocal makeprg=scheme\ --script\ %
endfunc

func! s:SetPythonOptions()
    setlocal makeprg=python3\ %
endfunc

func! s:SetRubyOptions()
    setlocal makeprg=ruby\ %
    imap <C-Space> <C-X><C-O>
endfunc

func! s:SetCCppOptions()
    set makeprg=$HOME/.vim/makeprg.sh\ %:p:.
endfunc

func! s:SetMakeOptions()
    set makeprg=make
endfunc

func! s:SetJavaOptions()
    set omnifunc=javacomplete#Complete
    set makeprg=$HOME/.vim/makeprg.sh\ %:p:.
endfunc

func! s:SetHtmlXml()
    set tabstop=2
    set shiftwidth=2
    set smarttab
    set autoindent
    "configure emmet
    let g:user_emmet_install_global=0
    EmmetInstall
    "USE: <C-y>展开
    setlocal makeprg=chromium\ %:p\ &
endfunc

" javaScript
func! s:SetJSOptions()
    setlocal makeprg=node\ %
endfunc

" Tex
func! s:SetTexOptions()
    setlocal makeprg=xelatex\ -halt-on-error\ %
endfunc

autocmd FileType text           call s:SetNormalOptions()
autocmd FileType c,cpp          call s:SetCCppOptions()
autocmd FileType make           call s:SetMakeOptions()
autocmd FileType java,groovy    call s:SetJavaOptions()
autocmd FileType html,xml,xhtml,ant,markdown,rst call s:SetHtmlXml()
autocmd FileType python         call s:SetPythonOptions()
autocmd FileType ruby           call s:SetRubyOptions()
autocmd FileType lisp,scheme    call s:SetLispOptions()
autocmd FileType lua            call s:SetLuaOptions()
autocmd FileType javascript     call s:SetJSOptions()
autocmd FileType tex            call s:SetTexOptions()

let s:SDCV_BUF_NAME = "sdcv-tmp"
func! Sdcv(word)
    let expl = system("sdcv -n ".a:word)
    "let expl=system('ldcv '.a:word)
    tabdo if expand("%") ==# s:SDCV_BUF_NAME | q! | endif
    execute "tabnew" s:SDCV_BUF_NAME
    setlocal buftype=nofile bufhidden=hide noswapfile
    1s/^/\=expl/
    1
endfunc
nmap <leader>k :call Sdcv(expand("<cword>"))<CR>

highlight TabLineFill ctermfg=235 ctermbg=none guifg=Grey15
highlight TabLine     term=none cterm=none ctermfg=250 ctermbg=235
                    \ gui=none guifg=Grey74 guibg=Grey15
highlight VertSplit   ctermfg=236
highlight TabLineSel  term=bold cterm=bold gui=bold
highlight CursorLine  cterm=none ctermbg=239 guibg=Grey40
highlight Comment     term=italic cterm=italic gui=italic
highlight ColorColumn ctermbg=239 guifg=Maroon guibg=Grey40
set fillchars=vert:\ 
set cursorline
set textwidth=79 fo+=Mm
set colorcolumn=+1
" highlight the white spaces end of line
match MatchParen /\(\t\|\s\)\+$/
2match Todo /\<NOTE\>\|\<TODO\>/
" for VTE compatible terminal set the shape of cursor at insert mode and
" normal mode
let &t_SI = "\<Esc>[6 q"
let &t_SR = "\<Esc>[4 q"
let &t_EI = "\<Esc>[2 q"

" disable auto switch inputmethod for fcitx
let g:enable_toggle_input = 0
func! Fcitx2en()
    let _ = system("fcitx-remote -c")
endfunc
func! Fcitx2zh()
    let _ = system("fcitx-remote -o")
endfunc
func! AutoSwitchInput()
    if g:enable_toggle_input == 1
        set timeoutlen=150
        "自动退出插入模式
        autocmd InsertLeave * call Fcitx2en()
        "自动进入插入模式
        autocmd InsertEnter * call Fcitx2zh()
    endif
endfunc
call AutoSwitchInput()

" save as root
command W w !sudo tee % > /dev/null
nmap <F5> :redraw!<CR>
let g:markdown_fenced_languages = ['c', 'cpp', 'lua', 'python', 'css', 'java',
      \ 'javascript']


" use vim-plug
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.local/share/vim/plugged')
    Plug 'vim-airline/vim-airline'
    "Plug 'bling/vim-bufferline'
    Plug 'scrooloose/nerdtree'
    Plug 'yianwillis/vimcdoc'
    Plug 'kien/ctrlp.vim'

    Plug 'lervag/vimtex'
    " comment it, because install it through AUR
    "Plug 'Valloric/YouCompleteMe', {'do': './install.py --clang-completer'}
    Plug 'SpaceVim/vim-luacomplete'

    Plug 'mattn/emmet-vim'
    Plug 'pangloss/vim-javascript'
    Plug 'othree/html5.vim'
    Plug 'hail2u/vim-css3-syntax'
    Plug 'vim-ruby/vim-ruby'
call plug#end()

" set for gui
if has("gui_running")
    set columns=82
    set guicursor=a:blinkon0
    set guioptions=
    " set gui font
    if has("gui_win32")
        set guifont=consolas:h12
    else
        if has("gui_gtk2") || has("gui_gtk3")
            set guifont=Monaco\ 9
        else
            set guifont=Monaco:h9
        endif
    endif
endif

" TODO communicate with terminal

" import configure file of plugs
source ~/.vim/plugsconf.vim
