"============================================================
"通用设置
"============================================================
set nocompatible		"不兼容vi
set backspace=indent,eol,start
set nu
set ruler
set ignorecase
set incsearch		"逐字高亮搜索
set matchtime=5		"高亮的时间
set history=500
set go=
set wildmenu
set nofen
set fdl=10			 "始终启用鼠标
set mouse=a
filetype off		"侦测文件类型
syntax enable		"语法高亮
let mapleader=","
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l
" Move a line of text using ALT+[jk] or Command+[jk] on mac
" In terminal, It maybe cant work.
nmap <M-j> mz:m+<cr>`z
nmap <M-k> mz:m-2<cr>`z
vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z
"1 tab == 4 spaces
set tabstop=4
set shiftwidth=4
set expandtab				"用空格替代tab,(%retab!空格转换为tab) :ret
set smarttab
set fileencodings=ucs-bom,utf-8,gbk,gb2312,cp936,default,latin1
set fileencoding=utf-8		"可以不用设置
"set encoding=utf-8			"设置状态栏的编码，可以不设置
"set completeopt=longest,menuone,preview
set completeopt=longest,menuone
"设置行长80字符自动换行
"set textwidth=80 fo+=Mm
"set novisualbell


"set shortmess=atI	"去掉欢迎界面
"set lines=28  columns=200		"窗口大小
"set textwidth=80				"文本行的长度，需要开启自动换行
" 基于缩进或语法进行折叠
set foldmethod=indent	"基于缩进
"set foldmethod=syntax|mnual手动
"启动vim时关闭代码折叠
"set nofoldenable
set foldenable
"空格折叠
nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<cr>
set foldlevel=9                 "深入9层自动折叠

"===========================================================
"gvim的设置在.gvimrc中
"===========================================================

set cino=:0                 "case与switch对齐
set cindent					"C语言缩进
"set list listchars=tab:>-	"可视化tab键
set autoindent				"继承上一缩进
set si						"智能缩进
" 对代码开启不扩展，统一为tab
autocmd filetype txt set spell	"对txt文档的英文进行语法检查
autocmd filetype lisp set nocindent autoindent si noexpandtab
autocmd filetype scheme set nocindent autoindent si noexpandtab
autocmd filetype python setlocal makeprg=python\ % noexpandtab
autocmd filetype h set tabstop=4 shiftwidth=4 noexpandtab
autocmd filetype c++ set tabstop=4 shiftwidth=4 noexpandtab
autocmd filetype py set noexpandtab tabstop=4 shiftwidth=4 noexpandtab

" 对不同项目进行编译的脚本
"set makeprg=$HOME/.vim/makeprg.sh
autocmd filetype c,cpp call SetCCppOptions()
"groovy: 为了gradle
autocmd filetype java,groovy call SetJavaOptions()
autocmd filetype html,xml,xhtml,ant call SetHtmlXml()

"对C/C++文件进行配置
func! SetCCppOptions()
    "set noexpandtab
    set makeprg=$HOME/.vim/makeprg.sh\ %:p:h:h\ %:p:.
endfunc
"对Java文件进行配置
func! SetJavaOptions()
    set omnifunc=javacomplete#Complete
    set makeprg=$HOME/.vim/makeprg.sh\ %:p:h:h\ %:p:.
endfunc
"对html/xml设置
func! SetHtmlXml()
    set tabstop=2
    set shiftwidth=2
    set expandtab
    set autoindent
    "emmet配置和使用
    let g:user_emmet_install_global=0
    EmmetInstall
    "USE: <C-y>展开
    "使用方法在http://blog.wpjam.com/m/emmet-grammar/
endfunc


"<F3>实现sdcv快捷查询
nmap <F3> :call Mydict()<cr>
function! Mydict()
    let expl=system('sdcv -n ' .
                \  expand("<cword>"))
    windo if
                \ expand("%")=="diCt-tmp" |
                \ q!|endif
    30vsp diCt-tmp
    setlocal buftype=nofile bufhidden=hide noswapfile
    1s/^/\=expl/
    1
endfunction

"<F4>编译"
map <F4> :call Compile()<cr>
func! Compile()
    if &filetype == 'asm'		"汇编
        exec "!clear"
        exec "!as '%' -o '%<.o' && ld '%<.o' -o '%<'"
    elseif &filetype == 'cs'		"c_sharp mcs、gmcs或mono-csc都是c#编译器
        exec "!clear"
        exec "!mcs '%'"
    elseif &filetype == 'tex'		"tex文件
        exec "!clear"
        "这里使用texlive的包,以后修改
        exec "!xelatex '%'"
    else
        exec ""
    endif
endfunc

"<F5>对简单小程序进行运行或预览
map <F5> :call Run()<cr>
func! Run()
    exec "w"
    if &filetype == 'c' || &filetype == 'asm' || &filetype == 'cpp'
        exec "!clear"
        exec "!./'%<'"
    elseif &filetype == 'java'	"java
        exec "!clear"
        call Runjava()
    elseif &filetype == 'xhtml' || &filetype == 'html'	"html
        exec "!firefox '%'"
    elseif &filetype == 'cs'	"c_sharp
        exec "!clear"
        exec "!./'%<.exe'"
    elseif &filetype == 'lua'   "lua
        exec "!lua '%:p:.'"
    endif
endfunc
func! Runjava()
    let s:firstline = getline(1)
    if s:firstline =~ "^package"
    else
        exec "!java '%:t:r'"
    endif
endfunc

"C语言调试"
map <F7> : call GDB()<cr>
func! GDB()
    exec "w"
    if &filetype == 'c'			"c
        exec "!clear"
        exec "!gcc -o %< % -g -Wall -lm -DDEBUG"
        exec "!gdb %<"
    elseif &filetype == 'cpp'		"cpp
        exec "!clear"
        exec "!g++ -o %< % -g"
        exec "!gdb %<"
    elseif &filetype == 'asm'	"汇编
        exec "!clear"
        exec "!as % -g -o %<.o && ld %<.o -o %<"
        exec "!gdb %<"
    elseif &filetype == 'java'	"java
        exec "!clear"
        exec "!javac -d . -g '%'"
        exec "!jdb '%<'"
    elseif &filetype == 'cs'	"c_sharp
        exec "!clear"
    else
        exec ""
    endif
endfunc

"使用vbundle来管理插件
"启动智能补全
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'bling/vim-airline'
"前端
Plugin 'hail2u/vim-css3-syntax'
Plugin 'mattn/emmet-vim'
Plugin 'pangloss/vim-javascript'
Plugin 'othree/html5.vim'
"NERD commenter,下面的AuthorInfo需要
Plugin 'scrooloose/nerdcommenter'
"添加作者信息
Plugin 'vim-scripts/AuthorInfo'
Plugin 'bling/vim-bufferline'
Plugin 'scrooloose/nerdtree'
Plugin 'majutsushi/tagbar'
Plugin 'yianwillis/vimcdoc'
Plugin 'artur-shaik/vim-javacomplete2'
"tex补全
Plugin 'lervag/vimtex'
"YCM!
Plugin 'Valloric/YouCompleteMe'
"C相关 h <-> c
Plugin 'taxilian/a.vim'
"...
call vundle#end()
filetype plugin indent on

"设置tagbar
let g:tagbar_indent = 1
let g:tagbar_iconchars = ['▸', '▾']

"NERD 配置
let g:NERDTreeIgnore = ['\~$', '\.pyc', '\.swp$']
"TODO 整合
"左边文件管理，右边tagbar
"USE: 在普通模式下输入 vm
nmap wm : call NerdTree_TagBar_Toggle()<cr>
function! NerdTree_TagBar_Toggle()
    exec "NERDTreeToggle"
    exec "TagbarToggle"
endfunction

"vim-css3-syntax配置
autocmd Filetype css setlocal iskeyword+=-

"下面是vim-airline的配置
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
set laststatus=2
let g:airline_powerline_fonts = 1
let g:bufferline_echo = 0
let g:airline_left_sep = ''
let g:airline_right_sep = ''
"设置256色
if $TERM == "xterm" || $TERM == "rxvt" || $TERM == "xterm-256color" ||
            \ $TERM == "rxvt-unicode" || $TERM == "dumb" ||
            \ $TERM == "vte-256color" || $TERM == "screen-256color" ||
            \ $TERM == "gnome-256color"
    set t_Co=256
    colorscheme desert
endif

"javascript配置
let javascript_enable_domhtmlcss = 1

"AuthorInfo使用,<F2>添加
let g:vimrc_author='leetking'
let g:vimrc_email='li_Tking@163.com'
let g:vimrc_homepage=''
nmap <F2> :AuthorInfoDetect<cr>

let g:JavaComplete_LibsPath=$HOME.'/.gradle/caches/'
"let g:JavaComplete_BaseDir="/tmp/.java_cache"
"if filereadable("xxxx.xml")
"let g:JavaComplete_SourcesPath="xxxx/xxxx/xxx/r"

"YCM配置
let g:ycm_global_ycm_extra_conf = $HOME.'/.vim/ycm_extra_conf.py'
let g:ycm_error_symbol = 'E>'
let g:ycm_warning_symbol = 'W>'
let g:ycm_min_num_of_chars_for_completion = 2
let g:ycm_complete_in_comments = 1
let g:ycm_complete_in_strings = 1
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:ycm_python_binary_path = 'python'
"TODO 设置tab不补全
"YCM跳转
"<leader>jd 跳到定义
nnoremap <leader>jd :YcmCompleter GoToDefinition<cr>

"c语言模板插入
iab chead #include <stdio.h><cr><cr>int main(int argc, char **argv)<cr>{<cr>return 0;<cr>}<cr>
iab cshead using System;<cr>using System.Collections.Generic;<cr>using System.Text;<cr>using System.Collections;<cr>using System.Runtime.InteropServices;<cr><cr>namespace xx {<cr>}<cr>
iab pyhead #!/usr/bin/env python3<cr>#-*-coding:utf-8-*-<cr>

"添加库函数gtk补全的路径
set path+=/usr/include/gtk-2.0/,/usr/include/gio-unix-2.0/
set path+=./include,/usr/include/x86_64-linux-gnu/
" 引入其他配置
"source $HOME/.vim/syntax/hi_tag.vim
"对于markdown文档的行末空格进行高亮    等价于(>=\S) +$ 但是目前不知道markdown的类型
highlight WhitespaceEOF ctermbg=cyan guibg=cyan
match WhitespaceEOF /\(\S\)\@<=\ \+$/
"对NOTE字和TODO一样
2match Todo /\<NOTE\>/
"插入格式如xxxx-xx-xx的日期
"nmap <leader>d "=strftime("%F")<cr>p
"imap <leader>d <C-R>=strftime("%F")<cr>
