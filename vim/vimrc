set nocompatible
set backspace=indent,eol,start
set number
set ruler
"set ignorecase
"set smartcase
set incsearch
set matchtime=5
set history=500
set wildmenu
set nofoldenable
set mouse=a
filetype on         "侦测文件类型
syntax enable       "语法高亮
let mapleader=","
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l
nmap <M-j> mz:m+<cr>`z
nmap <M-k> mz:m-2<cr>`z
vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z
"1 tab == 4 spaces
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set smarttab
set fileencodings=ucs-bom,utf-8,gbk,gb2312,cp936,default,latin1
set fileencoding=utf-8
"set encoding=utf-8
"set completeopt=longest,menuone,preview
set completeopt=longest,menu
"set textwidth=80 fo+=Mm
"set novisualbell
"设置256色
"if $TERM == "xterm" || $TERM == "rxvt" || $TERM == "xterm-256color" ||
"            \ $TERM == "rxvt-unicode" || $TERM == "dumb" ||
"            \ $TERM == "vte-256color" || $TERM == "screen-256color"
"    set t_Co=256
"    colorscheme desert
"endif
set t_Co=256
colorscheme desert


"set shortmess=atI
"set lines=28  columns=200
set foldmethod=indent
"set foldmethod=syntax|manual
set foldenable
nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<cr>
set foldlevel=9
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc,.png,.jpg

set cino=:0                 "case与switch对齐 TODO 但是注释没对齐
set cindent
set smartindent
set autoindent
"set list listchars=tab:>-
set expandtab

autocmd BufNewFile,BufRead *.txt                call SetNormalOptions()
autocmd BufNewFile,BufRead *.c,*.cpp            call SetCCppOptions()
autocmd BufNewFile,BufRead *.java,*.groovy      call SetJavaOptions()
autocmd BufNewFile,BufRead *.html,*.xml,*.xhtml,
            \ *.ant,*.markdown,*.rst            call SetHtmlXml()
autocmd BufNewFile,BufRead *.py                 call SetPythonOptions()
autocmd BufNewFile,BufRead *.rb                 call SetRubyOptions()
autocmd BufNewFile,BufRead *.lisp,*.scm         call SetLispOptions()
autocmd BufNewFile,BufRead *.lua                call SetLuaOptions()
autocmd BufNewFile,BufRead *.js                 call SetJSOptions()
autocmd BufNewFile,BufRead *.tex                call SetTexOptions()

" normal file
func! SetNormalOptions()
    "set spell
    set omnifunc=
endfunc

func! SetLuaOptions()
    setlocal makeprg=lua\ %
endfunc

func! SetLispOptions()
    set nocindent
    set autoindent
    set lisp
    " scheme is a link to chez-scheme
    setlocal makeprg=scheme\ --script\ %
endfunc

func! SetPythonOptions()
    setlocal makeprg=python3\ %
endfunc
func! SetRubyOptions()
    setlocal makeprg=ruby\ %
endfunc

func! SetCCppOptions()
    set makeprg=$HOME/.vim/makeprg.sh\ %:p:.
endfunc

func! SetJavaOptions()
    set omnifunc=javacomplete#Complete
    set makeprg=$HOME/.vim/makeprg.sh\ %:p:.
endfunc

func! SetHtmlXml()
    set tabstop=2
    set shiftwidth=2
    set smarttab
    set autoindent
    "configure emmet
    let g:user_emmet_install_global=0
    EmmetInstall
    "USE: <C-y>展开
    setlocal makeprg=xdg-open\ %\ &
endfunc

" javaScript
func! SetJSOptions()
    setlocal makeprg=node\ %
endfunc

" Tex
func! SetTexOptions()
    setlocal makeprg=xelatex\ -halt-on-error\ %
endfunc


"TODO 实现到`K'里去
nmap <F3> :call Mydict()<cr>
func! Mydict()
    let expl=system('sdcv -n '.expand("<cword>"))
    "let expl=system('ldcv '.expand("<cword>"))
    windo if expand("%")=="dict-tmp" | q! | endif
    30vsp dict-tmp
    setlocal buftype=nofile bufhidden=hide noswapfile
    1s/^/\=expl/
    1
endfunc

" highlight the match (>=\S) +$
highlight CursorLine term=reverse cterm=none ctermbg=8 guibg=Grey40
highlight Comment cterm=italic term=italic gui=italic
set cursorline
highlight WhitespaceEOF ctermbg=cyan guibg=cyan
match WhitespaceEOF /\(\S\)\@<=\ \+$/
" highlight keyword TODO
2match Todo /\<NOTE\>/
" for VTE compatible terminal set the shape of cursor at insert mode and
" normal mode
let &t_SI = "\<Esc>[6 q"
let &t_SR = "\<Esc>[4 q"
let &t_EI = "\<Esc>[2 q"

" disable auto switch inputmethod for fcitx
let g:enable_toggle_input = 0
func! Fcitx2en()
    let l:a = system("fcitx-remote -c")
endfunc
func! Fcitx2zh()
    let l:a = system("fcitx-remote -o")
endfunc
func! AutoSwitchInput()
    if g:enable_toggle_input == 1
        set timeoutlen=150
        "自动退出插入模式
        autocmd InsertLeave * call Fcitx2en()
        "自动进入插入模式
        autocmd InsertEnter * call Fcitx2zh()
    endif
endfunc
call AutoSwitchInput()

" save as root
command W w !sudo tee % > /dev/null
nmap <F5> :redraw!<cr>
let g:markdown_fenced_languages = ['c', 'cpp', 'lua', 'python', 'css', 'java']


" use vim-plug
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.local/share/vim/plugged')
    Plug 'vim-airline/vim-airline'
    Plug 'bling/vim-bufferline'
    Plug 'scrooloose/nerdtree'
    Plug 'yianwillis/vimcdoc'
    Plug 'kien/ctrlp.vim'

    Plug 'lervag/vimtex'
    " comment it, because install it through AUR
    "Plug 'Valloric/YouCompleteMe', {'do': './install.py --clang-completer'}
    Plug 'SpaceVim/vim-luacomplete'

    Plug 'mattn/emmet-vim'
    Plug 'pangloss/vim-javascript'
    Plug 'othree/html5.vim'
    Plug 'hail2u/vim-css3-syntax'
call plug#end()
" import configure file of plugs
source ~/.vim/plugsconf.vim
