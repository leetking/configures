"============================================================
"通用设置
"============================================================
set nocompatible        "不兼容vi
set backspace=indent,eol,start
set nu
set ruler
"set ignorecase
"set smartcase
set incsearch       "逐字高亮搜索
set matchtime=5     "高亮的时间
set history=500
set go=
set wildmenu
set nofen
set fdl=10          "始终启用鼠标
set mouse=a
filetype on         "侦测文件类型
syntax enable       "语法高亮
let mapleader=","
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l
" Move a line of text using ALT+[jk] or Command+[jk] on mac
" In terminal, It maybe cant work.
nmap <M-j> mz:m+<cr>`z
nmap <M-k> mz:m-2<cr>`z
vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z
"1 tab == 4 spaces
set tabstop=4
set shiftwidth=4
set softtabstop=4           "backspace回退4个空格
set expandtab               "用空格替代tab,(%retab!空格转换为tab) :ret
set smarttab
set fileencodings=ucs-bom,utf-8,gbk,gb2312,cp936,default,latin1
set fileencoding=utf-8      "可以不用设置
"set encoding=utf-8         "设置状态栏的编码，可以不设置
"set completeopt=longest,menuone,preview
set completeopt=longest,menu
"设置行长80字符自动换行
"set textwidth=80 fo+=Mm
"set novisualbell
"设置256色
"if $TERM == "xterm" || $TERM == "rxvt" || $TERM == "xterm-256color" ||
"            \ $TERM == "rxvt-unicode" || $TERM == "dumb" ||
"            \ $TERM == "vte-256color" || $TERM == "screen-256color"
"    set t_Co=256
"    colorscheme desert
"endif
set t_Co=256
colorscheme desert


"set shortmess=atI  "去掉欢迎界面
"set lines=28  columns=200      "窗口大小
"set textwidth=80               "文本行的长度，需要开启自动换行
" 基于缩进或语法进行折叠
set foldmethod=indent   "基于缩进
"set foldmethod=syntax|mnual手动
"启动vim时关闭代码折叠
"set nofoldenable
set foldenable
"空格折叠
nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<cr>
set foldlevel=9                 "深入9层自动折叠
" Suffixes that get lower priority when doing tab completion for filenames.
" These are files we are not likely to want to edit or read.
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc,.png,.jpg

"===========================================================
"gvim的设置在.gvimrc中
"===========================================================

set cino=:0                 "case与switch对齐 TODO 但是注释没对齐
set cindent                 "C语言缩进
set si                      "智能缩进
set autoindent              "继承上一缩进
"set list listchars=tab:>-  "可视化tab键
set expandtab

" 对不同项目进行编译的脚本
autocmd FileType txt            call SetNormalOptions()
autocmd FileType c,cpp          call SetCCppOptions()
autocmd FileType java,groovy    call SetJavaOptions()
autocmd FileType html,xml,xhtml,ant,markdown,rst call SetHtmlXml()
autocmd FileType python         call SetPythonOptions()
autocmd FileType ruby           call SetRubyOptions()
autocmd FileType lisp,scheme    call SetLispOptions()
autocmd FileType lua            call SetLuaOptions()
autocmd FileType javascript     call SetJSOptions()
autocmd FileType tex            call SetTexOptions()

"普通文件设置
func! SetNormalOptions()
    set spell   "对txt文档的英文进行语法检查
    set omnifunc=
endfunc
"Lua语言设置
func! SetLuaOptions()
    setlocal makeprg=lua\ %
endfunc
"lisp家族文件设置
func! SetLispOptions()
    set nocindent
    set autoindent
    set lisp
    " 使用chez-scheme
    setlocal makeprg=scheme\ --script\ %
endfunc
"python文件设置
func! SetPythonOptions()
    setlocal makeprg=python3\ %
endfunc
func! SetRubyOptions()
    setlocal makeprg=ruby\ %
endfunc
"对C/C++文件进行配置
func! SetCCppOptions()
    set makeprg=$HOME/.vim/makeprg.sh\ %:p:.
endfunc
"对Java文件进行配置
func! SetJavaOptions()
    set omnifunc=javacomplete#Complete
    set makeprg=$HOME/.vim/makeprg.sh\ %:p:.
endfunc
"对html/xml设置
func! SetHtmlXml()
    set tabstop=2
    set shiftwidth=2
    set smarttab
    set autoindent
    "emmet配置和使用
    let g:user_emmet_install_global=0
    EmmetInstall
    "USE: <C-y>展开
    "使用方法在http://blog.wpjam.com/m/emmet-grammar/
    setlocal makeprg=chromium\ %\ &
endfunc
"javaScript
func! SetJSOptions()
    setlocal makeprg=node\ %
endfunc
"Tex
func! SetTexOptions()
    setlocal makeprg=xelatex\ -halt-on-error\ %
endfunc


"<F3>实现sdcv快捷查询
"TODO 实现到`K'里去
nmap <F3> :call Mydict()<cr>
function! Mydict()
    let expl=system('sdcv -n '.expand("<cword>"))
    windo if expand("%")=="dict-tmp" | q! | endif
    30vsp dict-tmp
    setlocal buftype=nofile bufhidden=hide noswapfile
    1s/^/\=expl/
    1
endfunction

"<F4>编译"
map <F4> :call Compile()<cr>
func! Compile()
    if &filetype == 'cs'        "c_sharp mcs、gmcs或mono-csc都是c#编译器
        exec "!clear"
        exec "!mcs '%'"
    elseif &filetype == 'tex'       "tex文件
        exec "!clear"
        "这里使用texlive的包,以后修改
        exec "!xelatex '%'"
    else
        exec ""
    endif
endfunc

"Vundle管理插件
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'bling/vim-airline'
Plugin 'hail2u/vim-css3-syntax'
Plugin 'mattn/emmet-vim'
Plugin 'pangloss/vim-javascript'
Plugin 'othree/html5.vim'
Plugin 'bling/vim-bufferline'
Plugin 'scrooloose/nerdtree'
"Plugin 'majutsushi/tagbar'
Plugin 'yianwillis/vimcdoc'
"Plugin 'artur-shaik/vim-javacomplete2'
Plugin 'lervag/vimtex'                  "tex补全
Plugin 'Valloric/YouCompleteMe'         "YCM!
Plugin 'marijnh/tern_for_vim'
Plugin 'kien/ctrlp.vim'                 "ctrlp
Plugin 'SpaceVim/vim-luacomplete' "lua complete
" TODO 添加语言模板
call vundle#end()
filetype plugin indent on
filetype plugin on

"tagbar {
let g:tagbar_indent = 1
let g:tagbar_iconchars = ['▸', '▾']
"}

"nerdtree {
let g:NERDTreeIgnore = ['\~$', '\.pyc', '\.swp$', '\.o$']
"左边文件管理，右边tagbar
"USE: 在普通模式下输入 wm
nmap wm : call NerdTree_TagBar_Toggle()<cr>
function! NerdTree_TagBar_Toggle()
    exec "NERDTreeToggle"
"    exec "TagbarToggle"
endfunction
"}

"vim-css3-syntax {
autocmd Filetype css setlocal iskeyword+=-
"}

"vim-airline {
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
set laststatus=2
let g:airline_powerline_fonts = 1
let g:bufferline_echo = 0
let g:airline_left_sep = ''
let g:airline_right_sep = ''
"}

"javascript {
let javascript_enable_domhtmlcss = 1
"}

"javacomplete {
let g:JavaComplete_LibsPath=$HOME.'/.gradle/caches/'
"}

"YCM配置 {
let g:ycm_global_ycm_extra_conf = $HOME.'/.vim/ycm_common_conf.py'
let g:ycm_error_symbol = 'E>'
let g:ycm_warning_symbol = 'W>'
let g:ycm_min_num_of_chars_for_completion = 2
let g:ycm_complete_in_comments = 1
let g:ycm_complete_in_strings = 1
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_python_binary_path = 'python3'
let g:ycm_seed_identifiers_with_syntax = 1
"let g:ycm_key_list_select_completion = ['<C-TAB>', '<Down>']
"let g:ycm_key_list_previous_completion = ['<C-S-TAB>','<Up>']
"let g:ycm_key_invoke_completion = '<leader><tab>'
let g:ycm_filetype_blacklist = {
    \ 'tagbar': 1, 'nerdtree': 1,
    \}
let g:ycm_semantic_triggers =  {
            \   'c' : ['->', '.'],
            \   'objc' : ['->', '.'],
            \   'ocaml' : ['.', '#'],
            \   'cpp,objcpp' : ['->', '.', '::'],
            \   'perl' : ['->'],
            \   'php' : ['->', '::'],
            \   'cs,javascript,d,python,perl6,scala,vb,elixir,go' : ['.'],
            \   'java,jsp' : ['.'],
            \   'vim' : ['re![_a-zA-Z]+[_\w]*\.'],
            \   'ruby' : ['.', '::'],
            \   'lua' : ['.', ':'],
            \   'erlang' : [':'],
            \ }
"TODO 设置tab不补全
"YCM跳转
"<leader>jd 跳到定义
nnoremap <leader>jd :YcmCompleter GoToDefinition<cr>
"}

"ctrlp {
set runtimepath^=~/.vim/bundle/ctrlp.vim
"}

"对于markdown文档的行末空格进行高亮    等价于(>=\S) +$ 但是目前不知道markdown的类型
highlight WhitespaceEOF ctermbg=cyan guibg=cyan
match WhitespaceEOF /\(\S\)\@<=\ \+$/
"对NOTE字和TODO一样
2match Todo /\<NOTE\>/
"插入格式如xxxx-xx-xx的日期
"nmap <leader>d "=strftime("%F")<cr>p
"imap <leader>d <C-R>=strftime("%F")<cr>

" 一些特征的开启
let g:enable_toggle_input = 0

"自动开启关闭fcitx，需要vim-fcitx支持
func! Fcitx2en()
    let l:a = system("fcitx-remote -c")
endfunc
func! Fcitx2zh()
    let l:a = system("fcitx-remote -o")
endfunc
func! AutoSwitchInput()
    if g:enable_toggle_input == 1
        set timeoutlen=150
        "自动退出插入模式
        autocmd InsertLeave * call Fcitx2en()
        "自动进入插入模式
        autocmd InsertEnter * call Fcitx2zh()
    endif
endfunc
call AutoSwitchInput()

" 以root保存
command W w !sudo tee % > /dev/null

" <F5>强制重绘界面
nmap <F5> :redraw!<cr>

let g:markdown_fenced_languages = ['c', 'cpp', 'lua', 'python', 'css', 'java']
