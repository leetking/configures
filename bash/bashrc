# Shell is non-interactive. Be done now!
if [[ $- != *i* ]]; then
    return
fi

HISTSIZE=1000
HISTFILESIZE=2000

which dircolors > /dev/null 2>&1 && {
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
    alias sdcv='sdcv --color'

    alias tree='tree -F -C --charset=ascii'
    alias ll='ls -l'
    alias la='ls -A'
    alias l='ls -CF'
    alias hg='history | grep'
}

which fortune > /dev/null 2>&1 && fortune
host=''
if [ "$(who -m | grep -oP '\(.*\)')" != "" ]; then
    host="$(hostname) "
fi
git_branch='\W'
short_workspace=''
gen_short_workpath() {
    short_workspace=''
    local home="$HOME"
    local dir="$PWD"
    if [ "$dir" == "/" ]; then
        short_workspace="/"
        return
    fi
    if [[ $dir == ${HOME}* ]]; then
        short_workspace="~"
        dir=${dir#${HOME}}
    fi
    local SAVEIFS="$IFS"
    IFS="$(echo -ne "\n\b")"
    local tmp=($(echo $dir | sed -n "s/\//\n/g; p"))
    local len=$((${#tmp[@]}-1))
    if [ $len -lt 0 ]; then
        IFS="$SAVEIFS"
        return
    fi
    dir=""
    for ((i = 0; i < len; ++i)); do
        local t=$(echo "${tmp[$i]}" | grep -Po "^\.*[^/]?")
        dir="${dir}/$t"
    done
    dir="${dir}/${tmp[$len]}"
    short_workspace=$short_workspace$dir
    IFS="$SAVEIFS"
}
find_git_branch () {
    local dir=. head
    until [ "$dir" -ef / ]; do
        if [ -f "$dir/.git/HEAD" ]; then
            local head=$(< "$dir/.git/HEAD")
            if [[ $head = ref:\ refs/heads/* ]]; then
                git_branch="(${head#*/*/})"
            elif [[ $head != '' ]]; then
                git_branch="((detached))"
            else
                git_branch="((unknow))"
            fi
            return
        fi
        dir="../$dir"
    done
    git_branch=''
}
# PROMPT_COMMAND is invoked before displaying PS1
PROMPT_COMMAND="gen_short_workpath; find_git_branch; $PROMPT_COMMAND"
black=$'\[\e[1;30m\]'
red=$'\[\e[1;31m\]'
green=$'\[\e[1;32m\]'
yellow=$'\[\e[1;33m\]'
blue=$'\[\e[1;34m\]'
magenta=$'\[\e[1;35m\]'
cyan=$'\[\e[1;36m\]'
white=$'\[\e[1;37m\]'
normal=$'\[\e[m\]'
export PS1="${cyan}\$host\$short_workspace${yellow}\$git_branch${white}${normal}\$ "
export PS4="+$cyan\${BASH_SOURCE##*/}$normal:$red\$LINENO$normal: "

# improve command cd through `lcsfind`
# that is a lua script implemented by lcs algorithm.
cd() {
    if [ $# -lt 1 ]; then
        builtin cd
        return 0
    fi
    ! which lcsfind > /dev/null 2>&1 && {
        builtin cd "$1"
        return 0
    }
    local SAVEIFS="$IFS"
    IFS="$(echo -ne "\n\b")"
    local wks="$PWD"
    [ '/' == "${1:0:1}" ] && wks=""
    local dir=($(echo "$1" | sed -n "s/\//\n/g; p"))
    for ((i = 0; i < ${#dir[@]}; ++i)); do
        local pat=${dir[i]}
        local cddirs=()
        local idx=0
        for j in `ls -a $wks/`; do
            [ -d "$wks/$j" ] && {
                [ "." == "${pat:0:1}" -a "." == "${j:0:1}" ] && {
                    cddirs[$idx]="$j"
                }
                [ "." != "${j:0:1}" ] && {
                    cddirs[$idx]="$j"
                }
            }
            ((idx = idx + 1))
        done
        local nextdir=`lcsfind $pat ${cddirs[@]}`
        wks="$wks/$nextdir"
    done
    builtin cd "$wks/"
    IFS="$SAVEIFS"
    return 0
}
alias r='builtin cd /'          # '/' can't be as a command name and is instead of 'r'.
alias ..='builtin cd ..'
alias ...='builtin cd ../..'
alias 4.='builtin cd ../../../' # we can define more as command 'n.' to implement cd parent directories.

HISTTIMEFORMAT="%y/%m/%d %T "
# vi mode
# The implement of clearing screan by 'ctrl+l' is in file ~/.inputrc
set -o vi
# enable 256colors
export TERM=xterm-256color
# enable core, 10MB = 20480 blocks
ulimit -c 20480

# There are some software at /opt, now I append PATH from file /opt/pathsrc
[ -e /opt/pathsrc ] && . /opt/pathsrc

# bash-completion
[ -e /etc/bash_completion ] && . /etc/bash_completion

export EDITOR=vim


#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
#export SDKMAN_DIR="/home/ultk/.sdkman"
#[[ -s "/home/ultk/.sdkman/bin/sdkman-init.sh" ]] && source "/home/ultk/.sdkman/bin/sdkman-init.sh"
# Own shell scripts. #tools-tag
PATH=$PATH:/home/ultk/.dotfiles/tools/bin #tools-tag
