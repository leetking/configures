#!/usr/bin/env lua

-- a script for finding the most common string by a extended longest common subsequence (LCS) algorithm.
-- it is invoked by shell script to implement the command `cd`.
-- GPL v3 (C) leetking <li_Tking@163.com>

local debug = false

local max = math.max
local abs = math.abs
local tolower = string.lower
local match = string.match
local _D = function(...) if debug then io.stderr:write(...) end end
local ver = function()
    return _G._VERSION:match("5%.%d+")*10
end

-- the normal LCS algorithm
-- return: a count of common characters
local function lcs(s1, s2)
    -- Declare and initialize 2D array `dp`
    local dp={}
    for i = 0, max(#s1, #s2) do
        dp[i] = {}
        dp[i][0] = 0
        dp[0][i] = 0
    end
    for i = 1, #s1 do
        for j = 1, #s2 do
            if s1:sub(i, i) == s2:sub(j, j) then
                dp[i][j] = dp[i-1][j-1]+1
            else
                dp[i][j] = max(dp[i-1][j], dp[i][j-1])
            end
        end
    end
    return dp[#s1][#s2]
end

--[[
-- @pat: pattern
--       if @pat has upper character, match exactly;
--       else ignore case sensitive
-- @...: next searched strings
--
--]]
local function lcsfind(pat, ...)
    local maxi   = 1
    local maxlcs = -1
    local minabs = math.mininteger
    local fuzzy = true
    if match(pat, "%u+") then fuzzy = false end
    pat = fuzzy and tolower(pat) or pat
    local arg = type(...) == "table" and ... or {...}
    _D(#arg, "\n")
    for i = 1, #arg do
        local str = fuzzy and tolower(arg[i]) or arg[i]
        local lcst = lcs(pat, str)
        _D(pat, " ", str, " ", arg[i], " ", lcst, "\n")
        local abst = abs(#pat - #str)
        if lcst > maxlcs then
            maxi   = i
            minabs = abst
            maxlcs = lcst
        elseif lcst == maxlcs and abst < minabs then
            maxi   = i
            minabs = abst
        elseif lcst == maxlcs and abst == minabs
            and pat:sub(1,1) == str:sub(1,1) then
            if fuzzy then
                if maxi == math.mininteger or not match(arg[i], "%u+") then
                    maxi = i
                end
            else
                maxi = i
            end
        end
    end
    print(arg[maxi])
end

-- main interface
if #arg < 2 then
    print([[
Usage: lcsfind pattern strings
Find the likest string in `strings'  by `pattern` , implementing by a extended longest common subsequence (LCS) algorithm.
GPL v3 (C) leetking <li_Tking@163.com>]])
    return 1
end
if ver() < 51 then
    print([[
WARN: MAYBE DONT SUPPORT NO-ASICC CHARACTER SET.]])
end
local pat = arg[1]
for i = 1, #arg do
    arg[i] = arg[i+1]
end
lcsfind(pat, arg)

